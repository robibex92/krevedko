import crypto from "crypto";

/**
 * Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ Request ID –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –≤—Å–µ –ª–æ–≥–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
 *
 * Request ID –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑:
 * - X-Request-ID header (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–ª)
 * - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
 * - –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ response headers
 * - –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ req.requestId
 *
 * @example
 * // –í –ª–æ–≥–∞—Ö
 * console.log(`[${req.requestId}] Processing order...`);
 *
 * // –í –æ—à–∏–±–∫–∞—Ö
 * console.error(`[${req.requestId}] Error:`, error);
 *
 * // –ù–∞ –∫–ª–∏–µ–Ω—Ç–µ
 * // Response headers: X-Request-ID: abc123-def456-ghi789
 */
export function requestIdMiddleware(req, res, next) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç Request ID
  let requestId = req.headers["x-request-id"];

  // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
  if (!requestId || typeof requestId !== "string") {
    requestId = generateRequestId();
  } else {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã, –º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–∞)
    if (!/^[a-zA-Z0-9\-]{1,64}$/.test(requestId)) {
      requestId = generateRequestId();
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ request
  req.requestId = requestId;

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ response headers
  res.setHeader("X-Request-ID", requestId);

  // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å Request ID
  req.log = {
    info: (...args) => console.log(`[${requestId}]`, ...args),
    warn: (...args) => console.warn(`[${requestId}]`, ...args),
    error: (...args) => console.error(`[${requestId}]`, ...args),
    debug: (...args) => {
      if (process.env.NODE_ENV === "development") {
        console.log(`[${requestId}]`, ...args);
      }
    },
  };

  next();
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ Request ID
 * –§–æ—Ä–º–∞—Ç: timestamp-random (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1697123456789-a1b2c3d4)
 */
function generateRequestId() {
  const timestamp = Date.now().toString(36); // Base36 –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
  const random = crypto.randomBytes(4).toString("hex");
  return `${timestamp}-${random}`;
}

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å Request ID
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è morgan —Å Request ID
 */
export function requestLogger(req, res, next) {
  const start = Date.now();

  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  const userInfo = req.user ? `[User: ${req.user.id}]` : "[Guest]";
  console.log(
    `[requestLogger] Logging request: ${req.method} ${req.originalUrl || req.url} ${userInfo}`
  );
  req.log.info(`‚Üí ${req.method} ${req.originalUrl || req.url}`, userInfo);

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
  const originalSend = res.send.bind(res);
  res.send = function (body) {
    const duration = Date.now() - start;
    const statusColor =
      res.statusCode >= 400 ? "üî¥" : res.statusCode >= 300 ? "üü°" : "üü¢";

    req.log.info(
      `${statusColor} ${req.method} ${req.originalUrl || req.url} ${res.statusCode} - ${duration}ms`
    );

    return originalSend(body);
  };

  next();
}

/**
 * Helper –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Request ID –≤ error responses
 */
export function includeRequestIdInError(err, req, res, next) {
  // –î–æ–±–∞–≤–ª—è–µ–º Request ID –≤ –æ—à–∏–±–∫—É
  if (err && req.requestId) {
    err.requestId = req.requestId;

    // –ï—Å–ª–∏ —ç—Ç–æ API –æ—à–∏–±–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ response
    if (res.headersSent) {
      return next(err);
    }

    const errorResponse = {
      error: err.code || err.name || "INTERNAL_SERVER_ERROR",
      message: err.message || "An unexpected error occurred",
      requestId: req.requestId,
    };

    // –í development –¥–æ–±–∞–≤–ª—è–µ–º stack trace
    if (process.env.NODE_ENV === "development") {
      errorResponse.stack = err.stack;
    }

    res.status(err.statusCode || 500).json(errorResponse);
  } else {
    next(err);
  }
}
