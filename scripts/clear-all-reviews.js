#!/usr/bin/env node

import { PrismaClient } from "@prisma/client";
import fs from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Prisma
const prisma = new PrismaClient();

async function clearAllReviewsAndFiles() {
  try {
    console.log("üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤...");
    console.log("");

    // 1. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log("üìä –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
    console.log("üì∏ –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î...");
    const deletedImages = await prisma.publicReviewImage.deleteMany({});
    console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ë–î: ${deletedImages.count}`);

    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–∏ –æ—Ç–∑—ã–≤—ã
    console.log("üìù –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –∏–∑ –ë–î...");
    const deletedReviews = await prisma.publicReview.deleteMany({});
    console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î: ${deletedReviews.count}`);

    console.log("");

    // 2. –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    console.log("üíæ –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...");

    const reviewsDir = path.join(process.cwd(), "uploads", "reviews");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    try {
      await fs.access(reviewsDir);
    } catch (error) {
      console.log(
        "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è reviews –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"
      );
    }

    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const files = await fs.readdir(reviewsDir);

    if (files.length === 0) {
      console.log("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è reviews –ø—É—Å—Ç–∞");
    } else {
      console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${files.length}`);

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
      let deletedCount = 0;
      for (const file of files) {
        const filePath = path.join(reviewsDir, file);
        try {
          await fs.unlink(filePath);
          deletedCount++;
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${file}:`, error.message);
        }
      }

      console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedCount} –∏–∑ ${files.length}`);
    }

    console.log("");
    console.log("üéâ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    console.log(`üìä –ò—Ç–æ–≥–æ —É–¥–∞–ª–µ–Ω–æ:`);
    console.log(`   - –û—Ç–∑—ã–≤–æ–≤: ${deletedReviews.count}`);
    console.log(`   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ë–î: ${deletedImages.count}`);
    console.log(
      `   - –§–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: ${files.length > 0 ? files.length : 0}`
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—Ç–∑—ã–≤–æ–≤:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
clearAllReviewsAndFiles();
