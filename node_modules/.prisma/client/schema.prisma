generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int       @id @default(autoincrement())
  email                      String?   @unique
  passwordHash               String?
  name                       String?
  firstName                  String?
  lastName                   String?
  phone                      String?
  telegramId                 String?   @unique
  telegramUsername           String?
  telegramPhotoUrl           String?
  avatarPath                 String?
  addressStreet              String?
  addressHouse               String?
  addressApartment           String?
  role                       String    @default("CUSTOMER") // "ADMIN" | "CUSTOMER"
  referralCode               String?   @unique
  referredBy                 Int?
  loyaltyPoints              Int       @default(0)
  emailVerifiedAt            DateTime?
  emailVerificationTokenHash String?
  emailVerificationExpiresAt DateTime?

  cartItems     CartItem[]
  orders        Order[]
  favorites     Favorite[]
  reviews       Review[]
  comments      Comment[]
  referrals     User[]         @relation("UserReferrals")
  referrer      User?          @relation("UserReferrals", fields: [referredBy], references: [id])
  publicReviews PublicReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id       Int       @id @default(autoincrement())
  title    String
  startsAt DateTime?
  endsAt   DateTime?
  status   String    @default("DRAFT") // "DRAFT" | "ACTIVE" | "CLOSED"
  notes    String?

  products  CollectionProduct[]
  cartItems CartItem[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id               Int     @id @default(autoincrement())
  title            String
  description      String
  category         String?
  imagePath        String?
  unitLabel        String
  stepDecimal      Decimal
  priceKopecks     Int
  isActive         Boolean @default(true)
  stockQuantity    Decimal @default(0)
  minStock         Decimal @default(0)
  displayStockHint String? // "LOW" | "HIGH"
  tags             String? // JSON array of tags for search
  searchKeywords   String? // Additional search keywords

  collectionProducts CollectionProduct[]
  cartItems          CartItem[]
  orderItems         OrderItem[]
  favorites          Favorite[]
  reviews            Review[]
  comments           Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CollectionProduct {
  id                   Int      @id @default(autoincrement())
  collectionId         Int
  productId            Int
  priceOverrideKopecks Int?
  stepOverrideDecimal  Decimal?
  isActive             Boolean  @default(true)
  stockOverride        Decimal?
  displayStockHint     String?

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([collectionId, productId])
}

model CartItem {
  id               Int      @id @default(autoincrement())
  userId           Int
  collectionId     Int
  productId        Int
  quantityDecimal  Decimal
  unitPriceKopecks Int
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, collectionId, productId])
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  collectionId    Int
  status          String   @default("SUBMITTED") // "SUBMITTED" | "PAID" | "CANCELLED"
  totalKopecks    Int
  deliveryType    String   @default("PICKUP") // "PICKUP" | "DELIVERY"
  deliveryAddress String?
  deliveryCost    Int      @default(0)
  orderNumber     String?  @unique
  submittedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user       User           @relation(fields: [userId], references: [id], onDelete: Restrict)
  collection Collection     @relation(fields: [collectionId], references: [id], onDelete: Restrict)
  items      OrderItem[]
  proofs     PaymentProof[]
}

model OrderItem {
  id                Int     @id @default(autoincrement())
  orderId           Int
  productId         Int
  titleSnapshot     String
  unitLabelSnapshot String
  quantityDecimal   Decimal
  unitPriceKopecks  Int
  subtotalKopecks   Int
  imagePathSnapshot String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model PublicReview {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String?
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  images PublicReviewImage[]

  @@index([rating])
  @@index([createdAt])
}

model PublicReviewImage {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  imagePath String
  createdAt DateTime @default(now())

  review PublicReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

model PaymentProof {
  id         Int      @id @default(autoincrement())
  orderId    Int
  imagePath  String
  note       String?
  uploadedAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model AnalyticsEvent {
  id        Int      @id @default(autoincrement())
  eventType String // "page_view", "product_view", "add_to_cart", "order_created", etc.
  userId    Int?
  productId Int?
  orderId   Int?
  metadata  String? // JSON data
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([createdAt])
}

// Example for local SQLite:
// DATABASE_URL="file:./dev.db"
