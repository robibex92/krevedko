generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationStatus {
  NEW
  READ
  DISMISSED
}

enum NotificationAudience {
  ALL
  CUSTOM
}

model User {
  id                         Int       @id @default(autoincrement())
  email                      String?   @unique
  passwordHash               String?
  name                       String?
  firstName                  String?
  lastName                   String?
  phone                      String?
  telegramId                 String?   @unique
  telegramUsername           String?
  telegramPhotoUrl           String?
  avatarPath                 String?
  addressStreet              String?
  addressHouse               String?
  addressApartment           String?
  role                       String    @default("CUSTOMER") // "ADMIN" | "CUSTOMER"
  referralCode               String?   @unique
  referredBy                 Int?
  loyaltyPoints              Int       @default(0)
  emailVerifiedAt            DateTime?
  emailVerificationTokenHash String?
  emailVerificationExpiresAt DateTime?
  passwordResetTokenHash     String?
  passwordResetExpiresAt     DateTime?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  cartItems     CartItem[]
  orders        Order[]
  favorites     Favorite[]
  reviews       Review[]
  publicReviews PublicReview[]
  comments      Comment[]
  referrals     User[]         @relation("UserReferrals")
  referrer      User?          @relation("UserReferrals", fields: [referredBy], references: [id])
  refreshTokens RefreshToken[]
  recipes       Recipe[]
  notificationStatuses UserNotificationStatus[]
}

model Collection {
  id       Int       @id @default(autoincrement())
  title    String
  startsAt DateTime?
  endsAt   DateTime?
  status   String    @default("DRAFT") // "DRAFT" | "ACTIVE" | "CLOSED"
  notes    String?

  products  CollectionProduct[]
  cartItems CartItem[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id               Int     @id @default(autoincrement())
  title            String
  description      String
  category         String?
  imagePath        String?
  unitLabel        String
  stepDecimal      Decimal
  priceKopecks     Int
  isActive         Boolean @default(true)
  stockQuantity    Decimal @default(0)
  minStock         Decimal @default(0)
  displayStockHint String? // "LOW" | "HIGH"
  canPickupNow     Boolean @default(false)
  tags             String? // JSON array of tags for search
  searchKeywords   String?

  collectionProducts     CollectionProduct[]
  cartItems              CartItem[]
  orderItems             OrderItem[]
  favorites              Favorite[]
  reviews                Review[]
  publicReviews          PublicReview[]
  comments               Comment[]
  telegramMessages       ProductTelegramMessage[]
  inStockTelegramMessage InStockTelegramMessage?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CollectionProduct {
  id                   Int      @id @default(autoincrement())
  collectionId         Int
  productId            Int
  priceOverrideKopecks Int?
  stepOverrideDecimal  Decimal?
  isActive             Boolean  @default(true)
  stockOverride        Decimal?
  displayStockHint     String?

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([collectionId, productId])
}

model CartItem {
  id               Int      @id @default(autoincrement())
  userId           Int
  collectionId     Int
  productId        Int
  quantityDecimal  Decimal
  unitPriceKopecks Int
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, collectionId, productId])
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  collectionId    Int
  status          String   @default("SUBMITTED") // "SUBMITTED" | "PAID" | "CANCELLED"
  totalKopecks    Int
  deliveryType    String   @default("PICKUP") // "PICKUP" | "DELIVERY"
  deliveryAddress String?
  deliveryCost    Int      @default(0)
  paymentMethod   String   @default("development") // "development" | "online" | "invoice" | "cash"
  orderNumber     String?  @unique
  submittedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user       User           @relation(fields: [userId], references: [id], onDelete: Restrict)
  collection Collection     @relation(fields: [collectionId], references: [id], onDelete: Restrict)
  items      OrderItem[]
  proofs     PaymentProof[]
  payments   Payment[]      // Связь с платежами
}

model OrderItem {
  id                Int     @id @default(autoincrement())
  orderId           Int
  productId         Int
  titleSnapshot     String
  unitLabelSnapshot String
  quantityDecimal   Decimal
  unitPriceKopecks  Int
  subtotalKopecks   Int
  imagePathSnapshot String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
}

model PublicReview {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
  title     String?
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  images PublicReviewImage[]

  @@index([rating])
  @@index([createdAt])
}

model PublicReviewImage {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  imagePath String
  createdAt DateTime @default(now())

  review PublicReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

model Notification {
  id              Int                   @id @default(autoincrement())
  slug            String                @unique
  title           String
  excerpt         String?
  bodyBbcode      String
  bodyHtml        String
  imagePath       String?
  linkUrl         String?
  priority        NotificationPriority  @default(MEDIUM)
  audience        NotificationAudience  @default(ALL)
  audienceFilter  Json?
  isActive        Boolean               @default(true)
  showOnce        Boolean               @default(false)
  startsAt        DateTime?
  endsAt          DateTime?
  publishedAt     DateTime?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  statuses UserNotificationStatus[]

  @@index([isActive, startsAt, endsAt])
}

model UserNotificationStatus {
  id             Int                 @id @default(autoincrement())
  userId         Int
  notificationId Int
  status         NotificationStatus  @default(NEW)
  readAt         DateTime?
  dismissedAt    DateTime?
  dontShowAgain  Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
  @@index([status])
}

model PaymentProof {
  id         Int      @id @default(autoincrement())
  orderId    Int
  imagePath  String
  note       String?
  uploadedAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id                Int       @id @default(autoincrement())
  orderId           Int
  provider          String    // "sberbank" | "yoomoney" | "yandex" | "manual"
  providerPaymentId String?   @unique // ID платежа в системе провайдера
  amount            Int       // Сумма в копейках
  currency          String    @default("RUB")
  status            String    @default("PENDING") // "PENDING" | "PROCESSING" | "SUCCEEDED" | "FAILED" | "CANCELLED"
  paymentUrl        String?   // URL для оплаты (если есть)
  errorCode         String?   // Код ошибки (если есть)
  errorMessage      String?   // Сообщение об ошибке
  metadata          String?   @db.Text // JSON с дополнительными данными
  paidAt            DateTime? // Дата успешной оплаты
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([providerPaymentId])
  @@index([status])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Recipe {
  id             Int       @id @default(autoincrement())
  slug           String    @unique
  title          String
  excerpt        String?
  coverImagePath String?
  content        Json
  status         String    @default("DRAFT")
  publishedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  authorId       Int

  author User @relation(fields: [authorId], references: [id], onDelete: Restrict)
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model AnalyticsEvent {
  id        Int      @id @default(autoincrement())
  eventType String // "page_view", "product_view", "add_to_cart", "order_created", etc.
  userId    Int?
  productId Int?
  orderId   Int?
  metadata  String? // JSON data
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([createdAt])
}

model RefreshToken {
  id            Int       @id @default(autoincrement())
  userId        Int
  jti           String    @unique
  createdAt     DateTime  @default(now())
  expiresAt     DateTime
  revokedAt     DateTime?
  createdByIp   String?
  replacedByJti String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Category {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  telegramChatId  String
  telegramThreadId String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  productMessages ProductTelegramMessage[]
}

model ProductTelegramMessage {
  id               Int       @id @default(autoincrement())
  productId        Int
  categoryId       Int
  messageId        String
  messageText      String    @db.Text
  hasMedia         Boolean   @default(false)
  mediaType        String?   // "photo" | null
  sentAt           DateTime  @default(now())
  lastEditedAt     DateTime?
  canEdit          Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

model InStockTelegramMessage {
  id          Int       @id @default(autoincrement())
  productId   Int       @unique
  messageId   String
  messageText String    @db.Text
  hasMedia    Boolean   @default(false)
  sentAt      DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model TelegramSettings {
  id                    Int      @id @default(autoincrement())
  key                   String   @unique
  chatId                String?
  threadId              String?
  description           String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model TelegramMessageQueue {
  id           Int       @id @default(autoincrement())
  messageType  String    // "product_create", "product_update", "product_delete", "review", "recipe", "in_stock_add", "in_stock_remove"
  payload      Json
  status       String    @default("PENDING") // "PENDING", "PROCESSING", "SENT", "FAILED"
  attempts     Int       @default(0)
  maxAttempts  Int       @default(3)
  error        String?   @db.Text
  scheduledFor DateTime  @default(now())
  sentAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([status, scheduledFor])
  @@index([messageType])
}
